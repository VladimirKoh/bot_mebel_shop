from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import MessageNotModified
from contextlib import suppress
import httplib2
from googleapiclient.discovery import build
from oauth2client.service_account import ServiceAccountCredentials
from config import *

from dotenv import load

from keyboards import *

import os


load()


ADMIN_CHAT = os.getenv('ADMIN_CHAT_ID')


storage = MemoryStorage()
bot = Bot(token=os.getenv('TOKEN'), parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot=bot, storage=storage)


CREDENTIALS_FILE = 'creds.json'
spreadsheet_id = '1_WrV7BFeDaYDGweJhJYoqvaPouefqAZWlxMOm9INq0Q'


class StateUsersData(StatesGroup):
    address = State()
    type_production = State()
    material = State()
    number = State()
    finish_state = State()


async def connect_sheets(name, number, address='', type_production='', material=''):
    credentials = ServiceAccountCredentials.from_json_keyfile_name(
        CREDENTIALS_FILE,
        ['https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive'])
    httpAuth = credentials.authorize(httplib2.Http())
    service = build('sheets', 'v4', http = httpAuth)
    range_ = '–õ–∏—Å—Ç1!A1'  # TODO: Update placeholder value.
    value_input_option = 'RAW'  # TODO: Update placeholder value.
    value_range_body = {
        'values': [[name, number, address, type_production, material]]
    }
    values = service.spreadsheets().values().append(spreadsheetId=spreadsheet_id, 
                                                    range=range_, 
                                                    valueInputOption=value_input_option, 
                                                    body=value_range_body).execute()

async def edit_text_message(message: types.Message, status: bool):
    with suppress(MessageNotModified):
        if status:
            await message.edit_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/start</b>")
        else:
            await message.edit_text("üòû –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/start</b>")


@dp.message_handler(commands=['start'], state="*")
async def command_start_process(message: types.Message, state: FSMContext):
    if message.text[7:] == 'order_zamer':
        await state.set_state(StateUsersData.address.state)
        return await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ä—â–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.\n–í—Å–µ–≥–æ 4 —à–∞–≥–∞!\n\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å:', reply_markup=ReplyKeyboardRemove())
    elif message.text[7:] == 'zakaz':
        return await message.answer('–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω', reply_markup=get_keyboard_number())
    await state.finish()
    await message.answer(TEXT1, reply_markup=get_keyboard_menu())
    await message.answer_photo(photo=open('./images/start.png', 'rb'), reply_markup=get_keyboard_consultation())


@dp.message_handler(commands=['add_startadmin'])
async def command_add_post_photo(message: types.Message):
    text = """<b>–ú–µ–±–µ–ª—å –Ω–∞ –∑–∞–∫–∞–∑ –≤ –ú–æ—Å–∫–≤–µ –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
"–ö—Ä—É–≥–ª—ã–π —à–∫–∞—Ñ"</b>
12 –ª–µ—Ç–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –º–µ–±–µ–ª—å –ø–æ–¥ –∑–∞–∫–∞–∑
7500+–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
5 –¥–Ω–µ–π–Ω–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –º–µ–±–µ–ª–∏ –∏–∑ –õ–î–°–ü
-25% —Å–∫–∏–¥–∫–∏ –Ω–∞¬†—Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤—ã–µ–∑–¥ –∑–∞–º–µ—Ä—â–∏–∫–∞ —Å –æ–±—Ä–∞–∑—Ü–∞–º–∏
–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–º 3D-–ø—Ä–æ–µ–∫—Ç –±—É–¥—É—â–µ–π –º–µ–±–µ–ª–∏
–ü—Ä–∏–≤–µ–∑–µ–º –≤–∞—à—É –º–µ–±–µ–ª—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –≥–∞—Ä–∞–Ω—Ç–∏—é –Ω–∞ –≤—Å—é –ø—Ä–æ–¥—É–∫—Ü–∏—é –Ω–∞—à–µ–π —Ñ–∞–±—Ä–∏–∫–∏!
#–º–µ–±–µ–ª—å–Ω–∞–∑–∞–∫–∞–∑¬†#—à–∫–∞—Ñ—ã–Ω–∞–∑–∞–∫–∞–∑–º–æ—Å–∫–≤–∞¬†#—à–∫–∞—Ñ—ã–∫—É–ø–µ–º–æ—Å–∫–≤–∞¬†#—Ñ–∞–±—Ä–∏–∫–∞–º–µ–±–µ–ª–∏–º–æ—Å–∫–≤–∞¬†#—à–∫–∞—Ñ—ã–º–æ—Å–∫–≤–∞¬†#–º–µ–±–µ–ª—å–æ—Ç–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"""
    await bot.send_photo(chat_id=ADMIN_CHAT, photo=open('./images/00.png', 'rb'), caption=text, reply_markup=get_keyboard_chanel())



@dp.message_handler(content_types=types.ContentType.PHOTO)
async def command_add_post_photo_admin(message: types.Message):
    command, *text = message.caption.split()
    text = " ".join(text)
    if command == '/add_post_admin_with_photo':
        return await bot.send_photo(chat_id=ADMIN_CHAT, photo=message.photo[0].file_id, caption=text, reply_markup=get_keyboard_chanel())


@dp.message_handler(commands=['add_catalog_albumadmin'])
async def command_add_post(message: types.Message):
    # media = types.MediaGroup()
    # media.attach_photo(photo=open('./images/20-1.png', 'rb'), caption=a20)
    # media.attach_photo(photo=open('./images/20-2.png', 'rb'))
    # await bot.send_media_group(chat_id=ADMIN_CHAT, media=media)

    media = types.MediaGroup()
    media.attach_photo(photo=open('./images/21-1.png', 'rb'), caption=a21)
    media.attach_photo(photo=open('./images/21-2.png', 'rb'))
    await bot.send_media_group(chat_id=ADMIN_CHAT, media=media)

    media = types.MediaGroup()
    media.attach_photo(photo=open('./images/22-1.png', 'rb'), caption=a22)
    media.attach_photo(photo=open('./images/22-2.png', 'rb'))
    media.attach_photo(photo=open('./images/22-3.png', 'rb'))
    media.attach_photo(photo=open('./images/22-4.png', 'rb'))
    await bot.send_media_group(chat_id=ADMIN_CHAT, media=media)

    media = types.MediaGroup()
    media.attach_photo(photo=open('./images/23-1.png', 'rb'), caption=a23)
    media.attach_photo(photo=open('./images/23-2.png', 'rb'))
    media.attach_photo(photo=open('./images/23-3.png', 'rb'))
    media.attach_photo(photo=open('./images/23-4.png', 'rb'))
    await bot.send_media_group(chat_id=ADMIN_CHAT, media=media)



@dp.message_handler(commands=['add_catalogadmin'])
async def command_add_catalog(message: types.Message):
    # ,q6,q7,q8,q9,q10,q11,q12,q13,q14,q15,q16,q17,q18,q19
    list_images = [q1,q2,q3,q4,q5,q6,q7,q8,q9,q10,q11,q12,q13,q14,q15,q16,q17,q18,q19]
    for i in range(17, 20):
        await bot.send_photo(chat_id=ADMIN_CHAT, photo=open(f'./images/{i}.png', 'rb'), caption=list_images[i - 1], reply_markup=get_keyboard_chanel())


@dp.message_handler(Text(equals=BUT8))
async def commantd_zamer(message: types.Message, state: FSMContext):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∑–∞–º–µ—Ä—â–∏–∫–∞\n\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(StateUsersData.address.state)


@dp.message_handler(content_types=types.ContentType.CONTACT, state=StateUsersData.number)
async def get_number_user(message: types.Message, state: FSMContext):
    name = message.contact.full_name
    number = message.contact.phone_number
    await state.update_data(name=name, number=number)
    user_data = await state.get_data()
    text = f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data.get('number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {user_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n<b>–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</b> {user_data.get('type_production', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n<b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b> {user_data.get('material', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    await message.answer(text, reply_markup=ReplyKeyboardRemove())
    await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º', reply_markup=get_keyboard_check())
    await StateUsersData.next()


@dp.message_handler(state=StateUsersData.address)
async def get_address_user(message: types.Message, state: FSMContext):
    address = message.text
    await state.update_data(address=address)
    await message.answer("2/4\n–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏", reply_markup=get_keyboard_type_production())
    await StateUsersData.next()


@dp.message_handler(state=StateUsersData.type_production)
async def get_type_production_user(message: types.Message, state: FSMContext):
    type_production = message.text
    await state.update_data(type_production=type_production)
    await message.answer("3/4\n–£–∫–∞–∂–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª", reply_markup=get_keyboard_material())
    await StateUsersData.next()


@dp.message_handler(state=StateUsersData.material)
async def get_material_user(message: types.Message, state: FSMContext):
    material = message.text
    await state.update_data(material=material)
    await message.answer('4/4\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=get_keyboard_number())
    await StateUsersData.next()


@dp.message_handler(content_types=types.ContentType.CONTACT)
async def contacts(message: types.Message):
    await connect_sheets(message.contact.full_name, message.contact.phone_number)
    await message.answer(TEXT2, reply_markup=ReplyKeyboardRemove())


@dp.message_handler(content_types=types.ContentType.all)
async def photo(message: types.Message):
    print(message)


@dp.callback_query_handler(Text(equals='order_zamer'))
async def command_order(callback: types.CallbackQuery):
    await callback.answer(None)
    await callback.bot.send_message(chat_id=callback.from_user.id, text=TEXT3, reply_markup=get_keyboard_order())



@dp.callback_query_handler(Text(equals='yes_check'), state=StateUsersData.finish_state)
async def callback_yes_check(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    user_data = await state.get_data()
    name = user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    number = user_data.get('number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    address = user_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    type_production = user_data.get('type_production', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    material = user_data.get('material', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    await connect_sheets(name, number, address, type_production, material)
    await edit_text_message(callback.message, True)
    await state.finish()


@dp.callback_query_handler(Text(equals='no_check'), state=StateUsersData.finish_state)
async def callback_no_check(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer('–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
    await edit_text_message(callback.message, False)
    await state.finish()


@dp.callback_query_handler(Text(equals='call_manager'))
async def callback_manager(callback: types.CallbackQuery):
    await callback.answer('–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è')
    await callback.message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º¬ª</b>', reply_markup=get_keyboard_manager())


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)